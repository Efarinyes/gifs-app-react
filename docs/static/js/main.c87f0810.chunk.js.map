{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OAEI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAUT,EACVU,SAnBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,Y,uBCPjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAUH,GAF7C,+DAGDI,MAAOF,GAHN,cAGdG,EAHc,gBAICA,EAAKC,OAJN,uBAIbC,EAJa,EAIbA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAYbM,GAZa,4CAAH,sDCARO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIjC,OACI,yBAAKc,UAAU,0CAEX,yBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,+BAAKA,EAAL,OCLCO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAAgB,ECFd,SAAEA,GAAgB,IAAD,EACfd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH4B,mBAClCC,EADkC,KAC3BC,EAD2B,KAmBzC,OAbAC,qBAAW,WACPxB,EAASC,GACRwB,MAAM,SAAAC,GAECH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAIGqB,EDf0BK,CAAc1B,GAAjCa,EAFwB,EAE9BN,KAAca,EAFgB,EAEhBA,QA2BtB,OACI,oCACC,wBAAIJ,UAAU,qCAAd,IAAoDhB,EAApD,KAECoB,GAAW,uBAAGJ,UAAW,qCAAd,gBACX,yBAAKA,UAAU,aAEDH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAQjB,EAAIC,IACRD,UExCvBkB,EAAe,WAAM,MAGM1C,mBAAS,CAAC,cAHhB,mBAGvB2C,EAHuB,KAGX5C,EAHW,KAU9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BACA,4BACM4C,EAAWpB,KAAK,SAAAT,GAAS,OACvB,kBAAC,EAAD,CACI2B,IAAM3B,EACNA,UAAcA,UCftC8B,IAASC,OAEL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.c87f0810.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { PropTypes } from 'prop-types'\n\nexport const AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange = (e) => {\n       // console.log(e.target.value);\n        setinputValue(e.target.value);\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( cats => [inputValue, ...cats]);\n            setinputValue('');\n        }\n        \n    }\n\n    return (\n        \n        <form onSubmit = { handleSubmit }>\n            <input \n                type='text'\n                value = { inputValue }\n                onChange = { handleInputChange }\n            />\n\n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\n export const getGifs = async( categoria ) => {\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categoria) }&limit=10&api_key=P57qF7KBebhmbZERLpvjiEa2TVdIBbBM`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n\n    \n\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n             \n            <img src= {url} alt= {title}/>\n            <p> {title} </p>\n            \n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ( {categoria} ) => {\n    \n    const { data: images, loading} = useFetchGifs( categoria )\n\n    // CODI FUNCIONAL SENSE EL custom hook useFetchGifs\n    // LA NETEJA DEL COMPONENT ES CONSIDERABLE\n\n\n    //  const apiKey = 'P57qF7KBebhmbZERLpvjiEa2TVdIBbBM'\n    //  const url = 'https://api.giphy.com/v1/gifs/search/'\n    //  const categoriaConsulta = { categoria }\n\n    // const cercaGifs = async() => {\n        \n    //     const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categoria) }&limit=10&api_key=P57qF7KBebhmbZERLpvjiEa2TVdIBbBM`;\n    //     const resp = await fetch( url );\n    //     const {data} = await resp.json();\n    //     const gif = data.map( img => {\n    //         return {\n    //             id: img.id,\n    //             title: img.title,\n    //             url: img.images?.downsized_medium.url\n    //         }\n    //     })\n    //     console.log(gif);\n    //     setimages( gif );\n    // }\n   // cercaGifs()\n\n    return (\n        <>\n         <h3 className=\"animate__animated animate__fadeIn\"> {categoria} </h3>\n         \n        { loading && <p className =\"animate__animated' animate__flash\">Carregant...</p>}\n          <div className='card-grid'>\n                    {\n                        images.map( img => (\n                            <GifGridItem \n                                key = { img.id}\n                                {...img}\n                            />\n                        ))\n                    }\n                \n                \n            </div> \n        </>\n    )\n}\n\n\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( categoria ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n\n    });\n    useEffect( () => {\n        getGifs( categoria)\n        .then( imgs => {\n                \n                setState({\n                    data: imgs,\n                    loading: false\n                });\n        });\n    }, [categoria])\n    \n\n\n    return state // {data: [], loading: true}\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    const [categories, setCategories] = useState(['One Punch']); \n\n    // const afegirCategoria = () => {\n    //     seCategories([...categories, 'Sony'])\n    //     setCategories( cats => [...cats, 'Sony']) \n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories = { setCategories }/>\n            <hr/>\n            <ol>\n                { categories.map( categoria =>( \n                    <GifGrid \n                        key= {categoria} \n                        categoria = { categoria }/>) )\n                }\n            </ol>\n            \n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { GifExpertApp } from './GifExpertApp';\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}